#!/bin/bash

if [ "$EUID" -ne 0 ]; then 
  echo "This script needs to be run as root."
  exit 1
fi

# Import shared functions
source /usr/local/lib/octo-lib.sh

main_menu () {
  local MAINMENU=$(dialog --nocancel --title "TouchPrint Setup" --menu "" 10 50 0 \
     "1" "Configure networking" \
     "2" "Change password for pi" \
     "3" "Configure services" \
     "4" "Configure screen timeout" \
     "5" "Calibrate touchscreen" \
     "6" "Exit" 3>&1 1>&2 2>&3)

  case $MAINMENU in
    "1") nmtui; main_menu; return 0;;
    "2") change_password; main_menu; return 0;;
    "3") services_menu; main_menu; return 0;;
    "4") screen_timeout; main_menu; return 0;;
    "5") dialog --title "Touchscreen Calibration" --infobox "Waiting for touchscreen calibrator to close..." 3 50; DISPLAY=:0 xinput_calibrator --no-timeout --output-filename /etc/X11/xorg.conf.d/99-calibration.conf; main_menu; return 0;;
    "6") return 0;;
  esac 
}

services_menu () {
  local SERVICESMENU=$(dialog --nocancel --title "Services Select" --menu "" 10 50 0 \
     "1" "Enable/disable services" \
     "2" "Service health check" \
     "3" "Configure Nginx" \
     "4" "Configure MJPG" \
     "5" "Go Back" 3>&1 1>&2 2>&3) 

  case $SERVICESMENU in
    "1") service_toggle; services_menu; return 0;;
    "2") service_health; services_menu; return 0;;
    "3") nginx_config; services_menu; return 0;;
    "4") video_menu; services_menu; return 0;;
    "5") return 0;;
  esac 
}

service_health () {
  # Grab listening address/port from Nginx config
  if [[ -f /etc/nginx/listen.conf ]]; then
    LISTEN=$(awk '/listen/{gsub(";",""); print $2}' /etc/nginx/listen.conf)
  else
    LISTEN="443"
  fi
  
  # If Nginx config didn't contain a port, assume localhost
  if ! echo $LISTEN | grep ":" 2>&1; then
    ADDRESS="localhost:$LISTEN"
  else
    ADDRESS=$LISTEN
  fi

  # I hate bash, and soon you will too
  dialog --colors --title "Service Health" --msgbox "\
\ZnOctoPrint: \Zb$(if curl -s -I 127.0.0.1:5000 >/dev/null; then echo '\Z2Online'; elif [[ ! -f /etc/systemd/system/multi-user.target.wants/octoprint.service ]]; then echo "Disabled"; else echo '\Z1Offline'; fi)
\ZnMJPG:      \Zb$(if curl -s -I 127.0.0.1:9000 >/dev/null; then echo '\Z2Online'; elif [[ ! -f /etc/systemd/system/multi-user.target.wants/mjpg-streamer.service ]]; then echo "Disabled"; else echo '\Z1Offline'; fi)
\ZnNginx:     \Zb$(if curl -k -s -I https://$ADDRESS >/dev/null; then echo '\Z2Online'; elif [[ ! -f /etc/systemd/system/multi-user.target.wants/nginx.service ]]; then echo "Disabled"; else echo '\Z1Offline'; fi)
\ZnSSH:       \Zb$(if pgrep sshd >/dev/null; then echo '\Z2Online'; elif [[ ! -f /etc/systemd/system/multi-user.target.wants/sshd.service ]]; then echo "Disabled"; else echo '\Z1Offline'; fi)" 0 0
}

video_menu () {
  local VIDEOMENU=$(dialog --title "MJPG Config" --menu "" 10 50 0 \
    "1" "Camera Selection" \
    "2" "Video Settings" \
    "3" "Go Back" 3>&1 1>&2 2>&3)

  case $VIDEOMENU in
    "1") video_select; video_menu; return 0;;
    "2") video_config; video_menu; return 0;;
    "3") return 0;;
  esac
} 

main_menu
if dialog --title "Reboot Confirmation" --yesno "Some changes require a reboot to take effect.\nDo you want to reboot now?" 10 50; then
  reboot
fi
